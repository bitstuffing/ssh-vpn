/* 
 * Copyright (C) 2012 by the Massachusetts Institute of Technology.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.ietf.jgss;

import java.io.InputStream;
import java.io.OutputStream;

/**
 * This interface encapsulates the GSS-API security context and provides
 * the security services (wrap, unwrap, getMIC, verifyMIC) which are available
 * over the context. This interface is defined in section 7.4 of RFC 5653 
 * (http://tools.ietf.org/html/rfc5653).
 */
public interface GSSContext {

    /**
     * A lifetime constant representing the default context lifetime.
     */
    public static final int DEFAULT_LIFETIME = 0;

    /**
     * A lifetime constant representing indefinite context lifetime.
     */
    public static final int INDEFINITE_LIFETIME = Integer.MAX_VALUE;

    /**
     * Called by the context initiator to start the context creation
     * process. 
     *
     * @param inputBuf the token generated by the peer, ignored on the
     * first call.
     * @param offset the offset within inputBuf where the token begins.
     * @param len the length of the token within inputBuf, starting at the
     * offset.
     * @return an output token that the application may need to send to the
     * peer for processing by the accept call.
     * @throws GSSException
     */
    public byte[] initSecContext(byte[] inputBuf, int offset, int len)
            throws GSSException;

    /**
     * Called by the context initiator to start the context creation
     * process. 
     *
     * @param inStream contains the token generated by the peer, ignored on
     * the first call.
     * @param outStream the stream where the output token will be written.
     * During the final stage of context establishment, there may be no
     * bytes written.
     * @throws GSSException
     */
    public int initSecContext(InputStream inStream, OutputStream outStream)
            throws GSSException;

    /**
     * Called by the context acceptor upon receiving a token from the peer.
     * This method may return an output token that the application will
     * need to send to the peer for further processing by the init call.
     *
     * @param inTok the token generated by the peer.
     * @param offset the offset within inTok where the token begins.
     * @param len the length of the token within inTok (starting at
     * the offset).
     * @return output token that the application may need to send to the
     * peer for further processing by the init call.
     * @throws GSSException
     */
    public byte[] acceptSecContext(byte[] inTok, int offset, int len)
            throws GSSException;

    /**
     * Called by the context acceptor upon receiving a token from the peer.
     * This method may return an output token that the application will
     * need to send to the peer for further processing by the init call.
     *
     * @param inStream the input stream which contains the token generated 
     * by the peer.
     * @param outStream the output stream where the output token will be
     * written. During the final stage of context establishment, there may
     * be no bytes written.
     * @throws GSSException
     */
    public void acceptSecContext(InputStream inStream, OutputStream outStream)
            throws GSSException;

    /**
     * Used during the context establishment to determine the state of the
     * context.
     *
     * @return "true" if the context is fully established on the caller's
     * side and no more tokens are needed from the peer, "false" otherwise.
     */
    public boolean isEstablished();

    /**
     * Releases any system resources and cryptographic information stored
     * in the context object. This will invalidate the context.
     *
     * @throws GSSException
     */
    public void dispose() throws GSSException;

    /**
     * Returns the maximum message size that, if presented to the wrap
     * method with the same confReq and qop parameters, will result in
     * an output token containing no more than the maxTokenSize bytes.
     *
     * @param qop indicates the level of protection wrap will be asked to 
     * provide.
     * @param confReq indicates if wrap will be asked to provide privacy
     * services.
     * @param maxTokenSize the desired maximum size of the token emitted by
     * wrap.
     * @throws GSSException
     */
    public int getWrapSizeLimit(int qop, boolean confReq, int maxTokenSize)
            throws GSSException;

    /**
     * Applies per-message security services over the established security
     * context. The method will return a token with a cryptographic MIC
     * and may optionally encrypt the specified inBuf.
     *
     * @param inBuf application data to be protected.
     * @param offset the offset within inBuf where the data begins.
     * @param len the length of the data within inBuf (starting at the 
     * offset.
     * @param msgProp instance of MessageProp that is used by the application
     * to set the desired QOP and privacy state. Set QOP to 0 to request
     * the default QOP. Upon return, this object will contain the actual
     * privacy state that was applied to the message by the underlying
     * mechanism.
     * @return byte array containing both the MIC and the message.
     * @throws GSSException
     */
    public byte[] wrap(byte[] inBuf, int offset, int len, MessageProp msgProp)
            throws GSSException;

    /**
     * Applies per-message security services over the established security
     * context. The method will return a token with a cryptographic MIC
     * and may optionally encrypt the message in inStream. The outStream
     * will contain both the MIC and the message.
     *
     * @param inStream the input stream containing the application data to
     * be protected.
     * @param outStream the output stream to which to write the protected
     * message. The application is responsible for sending this to the other
     * peer for processing in its unwrap method.
     * @param msgProp instance of MessageProp that is used by the application
     * to set the desired QOP and privacy state. Set the desired QOP to 0 to
     * request the default QOP. Upon return from this method, this object
     * will contain the actual privacy state that was applied to the message
     * by the underlying mechanism.
     * @throws GSSException
     */
    public void wrap(InputStream inStream, OutputStream outStream,
            MessageProp msgProp) throws GSSException;

    /**
     * Used by the peer application to process tokens generated with the
     * wrap call. The method will return the message supplied in the peer
     * application to the wrap call, verifying the embedded MIC.
     *
     * @param inBuf GSS-API wrap token received from peer.
     * @param offset the offset within inBuf where the token begins.
     * @param len the length of hte token within inBuf (starting at the
     * offset)
     * @param msgProp upon method return, this object will contain the 
     * applied QOP, the privacy state of the message, and supplementary
     * information stating whether the token was a duplicate, old, out of
     * sequence, or arriving after a gap.
     * @throws GSSException
     */
    public byte[] unwrap(byte[] inBuf, int offset, int len,
            MessageProp msgProp) throws GSSException;

    /**
     * Used by the peer application to process tokens generated with the
     * wrap call. The method will return the message supplied in the peer
     * application to the wrap call, verifying the embedded MIC.
     * 
     * @param inStream the input stream containing the GSS-API wrap
     * token received from the peer.
     * @param outStream the output stream to which to write the application
     * message.
     * @param msgProp upon method return, this object will contain the 
     * applied QOP, the privacy state of the message, and supplementary
     * information stating whether the token was a duplicate, old, out of
     * sequence, or arriving after a gap.
     * @throws GSSException
     */
    public void unwrap(InputStream inStream, OutputStream outStream,
            MessageProp msgProp) throws GSSException;

    /**
     * Returns a token containing a cryptographic MIC for the supplied
     * message for transfer to the peer application. Privacy can only be
     * applied through the wrap call.
     *
     * @param inMsg the message over which to generate MIC.
     * @param offset the offset within inMsg where the token begins.
     * @param len the length of the token within inMsg (starting at the 
     * offset).
     * @param msgProp the instance of MessageProp that is used by the
     * application to set the desired QOP. Set the desired QOP to 0 in
     * msgProp to request the default QOP. Pass in "null" for msgProp to
     * request the default QOP.
     * @throws GSSException
     */
    public byte[] getMIC(byte[] inMsg, int offset, int len,
            MessageProp msgProp) throws GSSException;

    /**
     * Returns a token containing a cryptographic MIC for the supplied
     * message for transfer to the peer application. Privacy can only be
     * applied through the wrap call.
     *
     * @param inStream the input stream containing the message over which
     * to generate MIC.
     * @param outStream the output stream to write the GSS-API output
     * token to.
     * @param msgProp the instance of MessageProp that is used by the
     * application to set the desired QOP. Set the desired QOP to 0 in
     * msgProp to request the default QOP. Pass in "null" for msgProp to
     * request the default QOP.
     * @throws GSSException
     */
    public void getMIC(InputStream inStream, OutputStream outStream,
            MessageProp msgProp) throws GSSException;

    /**
     * Verifies the cryptographic MIC, contained in the token parameter,
     * over the supplied message.
     *
     * @param inTok token generated by peer's getMIC method.
     * @param tokOffset the offset within inTok where the token begins.
     * @param tokLen the length of the token within inTok (starting at the
     * offset).
     * @param inMsg application message over which to verify the cryptographic
     * MIC.
     * @param msgOffset the offset within inMsg where the message begins.
     * @param msgLen the length of the message within inMsg (starting at the
     * offset).
     * @param msgProp upon method return, this object will contain the 
     * applied QOP and supplementary information stating whether the token was 
     * a duplicate, old, out of sequence, or arriving after a gap. The
     * confidentiality state will be set to "false".
     * @throws GSSException
     */
    public void verifyMIC(byte[] inTok, int tokOffset, int tokLen,
            byte[] inMsg, int msgOffset, int msgLen,
            MessageProp msgProp) throws GSSException;

    /**
     * Verifies the cryptographic MIC, contained in the token parameter,
     * over the supplied message.
     *
     * @param tokStream the input stream containing the token generated by
     * the peer's getMIC method.
     * @param msgStream the input stream containing the application message
     * over which to verify the cryptographic MIC.
     * @param msgProp upon method return, this object will contain the 
     * applied QOP and supplementary information stating whether the token was 
     * a duplicate, old, out of sequence, or arriving after a gap. The
     * confidentiality state will be set to "false".
     * @throws GSSException
     */
    public void verifyMIC(InputStream tokStream, InputStream msgStream,
            MessageProp msgProp) throws GSSException;

    /**
     * Deactivates the security context and creates an inter-process token
     * which, when passed to the byte array constructor of the GSSContext
     * interface in another process, will re-activate the context in the
     * second process.
     *
     * @return inter-process token representing the current security context.
     * @throws GSSException
     */
    public byte[] export() throws GSSException;

    /**
     * Sets the request state of the mutual authentication flag for the
     * context. Only valid for the initiator before the context creation 
     * process begins.
     *
     * @param state boolean representing if mutual authentication should
     * be requested during the context establishment.
     * @throws GSSException
     */
    public void requestMutualAuth(boolean state) throws GSSException;

    /**
     * Sets the request state of the replay detection service for the
     * context. Only valid for the initiator before the context creation 
     * process begins.
     *
     * @param state boolean representing if replay detection is desired over 
     * the established context.
     * @throws GSSException
     */
    public void requestReplayDet(boolean state) throws GSSException;

    /**
     * Sets the request state for the sequence checking service of the
     * context. Only valid for the initiator before the context creation
     * process begins.
     *
     * @param state boolean representing if sequence detection is desired
     * over the established context.
     * @throws GSSException
     */
    public void requestSequenceDet(boolean state) throws GSSException;

    /**
     * Sets the request state for the credential delegation flag for the
     * context. Only valid for the initiator before the context creation
     * process begins.
     *
     * @param state boolean representing if credential delegation is desired.
     * @throws GSSException
     */
    public void requestCredDeleg(boolean state) throws GSSException;

    /**
     * Requests anonymous support over the context. Only valid for the
     * initiator before the context creation process begins.
     *
     * @param state boolean representing if anonymity support is requested.
     * @throws GSSException
     */
    public void requestAnonymity(boolean state) throws GSSException;

    /**
     * Requests that confidentiality service be available over the context. 
     * Only valid for the initiator before the context creation process 
     * begins.
     *
     * @param state boolean indicating if confidentiality services are to be
     * requested for the context.
     * @throws GSSException
     */
    public void requestConf(boolean state) throws GSSException;

    /**
     * Requests that integrity services be available over the context. Only
     * valid for the initiator before the context creation process begins.
     *
     * @param state boolean indicating if integrity services are to be
     * requested for the context.
     * @throws GSSException
     */
    public void requestInteg(boolean state) throws GSSException;

    /**
     * Sets the desired lifetime for the context in seconds. Only valid
     * for the initiator before the context creation process begins.
     *
     * @param lifetime the desired context lifetime in seconds.
     * @throws GSSException
     */
    public void requestLifetime(int lifetime) throws GSSException;

    /**
     * Sets the channel bindings to be used during context establishment. Only
     * valid before the context creation process begins.
     *
     * @param cb channel bindings to be used.
     * @throws GSSException
     */
    public void setChannelBinding(ChannelBinding cb) throws GSSException;

    /**
     * Returns the state of the delegated credentials for the context.
     *
     * @return desired state when issued before context establishment is
     * completed or when the isProtReady method returns "false", otherwise,
     * the actual state over the established context.
     */
    public boolean getCredDelegState();

    /**
     * Returns the state of the mutual authentication option for the context.
     *
     * @return desired state when issued before context establishment is
     * completed or when the isProtReady method returns "false", otherwise,
     * the actual state over the established context.
     */
    public boolean getMutualAuthState();

    /**
     * Returns the state of the replay detection option for the context.
     *
     * @return desired state when issued before context establishment is
     * completed or when the isProtoReady method returns "false", otherwise
     * the actual state over the established context.
     */
    public boolean getReplayDetState();

    /**
     * Returns the state of the sequence detection option for the context.
     *
     * @return desired state when issued before context establishment is
     * completed or when the isProtoReady method returns "false", otherwise
     * the actual state over the established context.
     */
    public boolean getSequenceDetState();

    /**
     * Returns "true if this is an anonymous context.
     *
     * @return desired state when issued before context establishment is
     * completed or when the isProtoReady method returns "false", otherwise
     * the actual state over the established context.
     */
    public boolean getAnonymityState();

    /**
     * Test if the context is transferable to other processes through the
     * use of the export method.
     *
     * @return "true" if the context is tranferable, "false" otherwise.
     * @throws GSSException
     */
    public boolean isTransferable() throws GSSException;

    /**
     * Test if the per-message operations can be applied over the context,
     * also indicating if the get methods will return actual context state
     * characteristics instead of the desired state.
     *
     * @return "true" if per-message operations can be applied over the
     * context, otherwise "false".
     */
    public boolean isProtReady();

    /**
     * Returns the confidentiality service state over the context.
     *
     * @return "true" when confidentiality services are available, 
     * otherwise, "false".
     */
    public boolean getConfState();

    /**
     * Returns the integrity service state over the context.
     *
     * @return "true" if integrity services are available, otherwise "false".
     */
    public boolean getIntegState();

    /**
     * Returns the context lifetime in seconds.
     *
     * @return context lifetime in seconds.
     */
    public int getLifetime();

    /**
     * Returns the name of the context initiator. Guaranteed to return an MN.
     *
     * @return the GSSName of the context initiator.
     */
    public GSSName getSrcName();

    /**
     * Returns the name of the context target (acceptor).
     *
     * @return the GSSName of the context target (acceptor).
     */
    public GSSName getTargName();

    /**
     * Returns the mechanism Oid for this context.
     *
     * @return mechanism Oid for the context.
     * @throws GSSException
     */
    public Oid getMech() throws GSSException;

    /**
     * Returns the delegated credential object on the acceptor's side.
     *
     * @return the delegated credential (GSSCredential) on the acceptor's
     * side.
     * @throws GSSException
     */
    public GSSCredential getDelegCred() throws GSSException;

    /**
     * Tests if this is the initiator of the context.
     *
     * @return "true" if this is the initator of the context, otherwise,
     * "false".
     * @throws GSSException
     */
    public boolean isInitiator() throws GSSException;

}
